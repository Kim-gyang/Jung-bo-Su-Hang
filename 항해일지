항해일지 링크(with code)
https://docs.google.com/document/d/1pcBfWAdmL_3fOel3lCfqp6Gda6G2kKUhQjxddpu03N0/edit
2019.04.15 (항해일지_1일차)

주제 후보들 : 1. 오비탈의 시각화 
                      2. 전자를 비편재화 시켜주는 프로그램 만들기
                      3. 화학평형에서 근사조건 확인후 농도변화 계산하기

선정한 주제 : 3번 주제
 
주제 구체화 : 화학식, 초기농도를 입력 받으면 pH값을 반환해주는 프로그램 만들기

주제 결정 이유 :  1번 주제는 v-python을 이용하여 어떤 원자의 오비탈을 시각화 하려 했지만 원자번호가 커질수록 오비탈은 복잡해짐으로 구현 가능성이 낮다고 생각했다. 또한 이것을 구현해서 응용할 분야가 적다고 판단했다.
2번 주제는 만약 혼성오비탈이 없는 원자라면 쉽게 구현 할 수 있지만 혼성오비탈이 아닌 원자의 전자를 비편재화하는 것은 굳이 python을 이용하여 해결할 필요성을 못느꼈다.
그렇다고 혼성오비탈이 있는 문제를 풀기엔 아직 우리가 혼성오비탈에 대해 배우지 않았으므로 문제해결에 어려움을 느낄것 같았다.
3번 주제는 근사조건 따진뒤, 질량작용법칙 = 해리상수를 풀지 말지를 결정한다. 이것은 python을 이용한다면 쉽게 해결할 수있다.  또한 이 주제를 성공적으로 구현한다면 화학평형의  문제는 범위가 매우 넓기 때문에 활용도가 높을 것으로 예상된다.
예를 들어 다양성자성산일때 pH, 현재 이 반응이 평형에 도달했을 때 계안에 존재하는 물질의 농도, 물질이 석출되는 농도등을 구할 수 있을 것이다.

문제 해결의 필요성 : 산, 염기가 가수분해되는 반응에서 pH를 구할 때 이온화도가 0.05보다 작거나 같은지를 문제마다 확인해야한다. 만약 이 조건이 성립한다면 공식을 사용하여 pH를 쉽게 구할 수 있다. 하지만, 만약 이온화도가 0.05보다 크다면 질량작용법칙=해리상수를 풀어서 pH를 해야한다.  이 과정은 계산이 복잡할 수 있고 시간이 오래

2019.05.13 (항해일지_2일차)
이론적 배경:

3단계에서 이온화도가 0.05보다 작거나 같을 때  상자 내의 근사식을 사용할 수 있다.

만약 이온화도가 0.05보다 크다면 아래와 같은 과정을 통해 pH를 구해낼 수 있다. 이 과정이 질량작용법칙 = 해리상수를 푸는 과정이다. 



2. MVP 구상 및 구현하기
MVP : 초기 농도와 해리상수 값을 입력받고 pH를 반환 해주는 프로그램 

MVP를 구현시키기 위해선 먼저 초기농도와 해리상수를 입력받아야한다.
두 번째로 이온화도를 입력받은 값을 이용하여 구한다.
세 번째로 이온화도가 0.05보다 크거나 같은지를 판단한다.
만약 이온화도가 0.05보다 작거나 같으면 이론적 배경의 [H+]를 근사해서 구하는 공식을 사용하여 pH를 구해 반환시킨다.
그러나, 이온화도가 0.05보다 크다면 질량작용법칙 = 해리상수를 해결해야한다. 
이 과정은 이차방정식의 해를 구해 농도변화를 알아내는 과정이다.
농도변화를 알면 pH를 구할수 있다. 
이때, 이 2차 방정식은 대부분 인수분해 되지 않으므로 근의 공식을 이용해서 농도변화를 계산한다. 

  

# 입력받기 

import math

a = input('화학식을 입력하시오. 단, aA + bB => cC + dD 꼴을 만족하시오')
b= float(input('산 혹은 염기의 초기농도를 입력하시오'))
c= float(input('산 혹은 염기의 해리 상수의 값을 입력하시오. 단, 3e-5 와 같은 꼴을 이용하시오'))

if (c/b)**0.5 <= 0.05 :
    print('pH는',-math.log10((b*c)**0.5) )

#2차방정식 코드
def roots(a,b,c):
    D = (b**2 - 4*a*c)**0.5        
    return (-b + D) / (2*a)
    return (-b - D) / (2*a)

진행상황 : 2일차 코드는 이온화도를 계산해 0.05보다 작거나 같을 경우 pH를 반환하는 것 까지 해결했다. 화학식을 입력받는 부분은 최종 목표에 포함되어 있어서 첨가했다. 하지만 좀 더 구체화 시킬 필요가 있다.

현재 직면한 문제: 입력을 받을 때 10의 거듭제곱 꼴로 표현되는 경우를 3e-4와 같은 방법으로 나타내 해결했다. 또한 각 이차방정식을 float화 하여 계산하였다.



2019.05.14(항해일지_3일차)
# 입력받기 

import math

a = input('화학식을 입력하시오. 단, aA + bB => cC + dD 꼴을 만족하시오')
b= float(input('산 혹은 염기의 초기농도를 입력하시오'))
c= float(input('산 혹은 염기의 해리 상수의 값을 입력하시오. 단,  3e-5  꼴을 이용하시오'))

if (c/b)**0.5 <= 0.05 :
    print('pH는',-math.log10((b*c)**0.5) )
else:
    -math.log10(roots(1,c,c*b))



#2차방정식 코드
def roots(a,b,c):
    D = (b**2 - 4*a*c)**0.5        
    return (-b + D) / (2*a)
    

# 입력받기 

import math

a = input('화학식을 입력하시오. 단, aA + bB => cC + dD 꼴을 만족하시오')
b= float(input('산 혹은 염기의 초기농도를 입력하시오'))
c= float(input('산 혹은 염기의 해리 상수의 값을 입력하시오. 단,  3e-5  꼴을 이용하시오'))

if (c/b)**0.5 <= 0.05 :
    print('pH는',-math.log10((b*c)**0.5) )
else:
    print(-math.log10(roots(1,c,-c*b)))


발전한 점: 이차방정식 근을 구하는 프로그램 중 허근을 제외하고 판별식 앞의 부호가 양의 부호인 것만을 유의미한 정보로 사용하여 프로그래밍 상에서 처리했다.


2019.05.20 (항해일지_4일차)
#다양성자산 계산
a = input('화학식을 입력하시오. 단, aA + bB => cC + dD 꼴을 만족하시오')
b1= float(input('이가 산 혹은 염기의 초기농도를 입력하시오'))
c1= float(input('이가 산 혹은 염기의 해리 상수의 값을 입력하시오. 단,  3e-5  꼴을 이용하시오'))
c2= float(input('산 혹은 염기의 해리 상수의 값을 입력하시오. 단, 3e-5  꼴을 이용하시오'))

if (c1/b1)**0.5 <= 0.05 :
    b2= (b1*c1)**0.5
    if (c2/b2)**0.5 <= 0.05:
        print('pH는',-math.log10(b2+(b2*c2)**0.5))
    else:
        print('pH는',-math.log10(b2+roots(1,c2+b2,-b2*c2)))
else:
    b2=roots(1,c,-c*b)



2019.05.27
제대로 고친 코드
(동일한 조건으로 else 에 대해서도 pH구하는 과정을 진행한다)
import math

a = input('화학식을 입력하시오. 단, aA + bB => cC + dD 꼴을 만족하시오')
b1= float(input('이가 산 혹은 염기의 초기농도를 입력하시오'))
c1= float(input('이가 산 혹은 염기의 Ka1의 값을 입력하시오. 단, 3e-5? 꼴을 이용하시오'))
c2= float(input('이가 산 혹은 염기의 Ka2의 값을 입력하시오. 단, 3e-5? 꼴을 이용하시오'))

if (c1/b1)**0.5 <= 0.05 :
    b2= (b1*c1)**0.5
    if (c2/b2)**0.5 <= 0.05:
        print('pH는',-math.log10(b2+(b2*c2)**0.5))
    else:
        print('pH는',-math.log10(b2+roots(1,c2+b2,-b2*c2)))
else:
    b2= roots(1,c,-c*b)
    if (c2/b2)**0.5 <= 0.05:
        print('pH는',-math.log10(b2+(b2*c2)**0.5))
    else:
        print('pH는',-math.log10(b2+roots(1,c2+b2,-b2*c2)))


    
 앞으로 더 시도해 볼 문제

#여러 산을 복합적으로 첨가한 용액
# Ka 값 load해주는 프로그램 만들기
# 화학식  반응물(산성물질 혹은 염기성물질)입력
#완충용액

2019.06.03 (항해일지_5일차)

현재 당면한 문제

 Ka값을 load해주는 프로그램을 만들려고 했으나 적당한 Ka Table을 찾지 못해 실패했다. 이는 크게 어렵지 않은 코드이고 충분한 자료가 주어진 상황에선 해결 할 수 있는 문제이므로 다음에 다시 시도해보도록 하기로 했다.

화학식을 입력하지 않고 산이나 염기 화학식이 주어지는 경우
(산인지 염기인지 입력을 받는 경우)

#2차방정식 코드
def roots(a,b,c):
    D = (b**2 - 4*a*c)**0.5        
    return (-b + D) / (2*a)
# 입력받기 
import math
a = input('조사하고자 하는 화학종이 산인지 염기인지 말하시오')
b= float(input('산 혹은 염기의 초기농도를 입력하시오'))
c= float(input('산 혹은 염기의 해리 상수의 값을 입력하시오. 단,  3e-5  꼴을 이용하시오'))
if a== '산':
    if (c/b)**0.5 <= 0.05 :
        print('pH는',-math.log10((b*c)**0.5) )
    else:
        print('pH는',-math.log10(roots(1,c,-c*b)))
else:
    if (c/b)**0.5 <= 0.05 :
        print('pH는',14+math.log10((b*c)**0.5) )
    else:
        print('pH는',14+math.log10(roots(1,c,-c*b)))

완충용액 만들기


a=float(input('화학종의 pKa를 입력하시오'))
b=float(input('원하는 완충용액의 pH를 입력하시오'))
c=float(input('원하는 완충용액의 몰농도를 입력하시오'))
d=float(c/(2.71**(b-a)+1))
e=float(c-c/(2.71**(b-a)+1))

print('짝산의 농도는',d,'짝염기의 농도는',e)


핸더슨 하셀바흐 식을 이용해 짝산과 짝염기의 농도비를 구하고 짝산 짝염기 전체의 농도 합을 이용해 각 화학종의 농도를 구할 수 있다.

발전한 점: 실제 실험에서도 자주 활용되는 완충용액 제조시 각각 넣어주어야 하는 짝산과 짝염기의 농도를 구해주는 프로그램을 만들어 활용 가능성을 높여보았다.




전체적인 프로젝트 평가


잘한 점: 
   연구가 진행됨에 따라 기본적인 코드에서부터 심화적인 코드와 실제로 활용 가능한 코드로의 발전이 잘 되었다. 또한 pH를 구해주는 코드에서는 각 경우를 잘 나누어 경우마다의 계산을 철저하게 나누어 진행해 본 점이 좋았다. 완충용액을 만든 프로그램은 특히 이번 과제연구 당시에도 이용해 볼 만큼 이용가치가 있었던 것 같다.

아쉬운 점:
   Ka 값을 load해 주는 것이 굉장히 중요한 목표 중 하나였는데 자료를 찾지 못해서 아쉬웠다. pdf를 csv로 변환도 해 보았고 자료를 찾아가며 직접 수작업으로 csv 파일을 만들어 보기도 했는데 수작업으로 만들기엔 한계가 있음을 깨닫고 포기하게 되었다. 
   또한 프로그램의 초점 자체가 계산을 대행해 주는 데에 맞춰져 있다보니 완충용액을 제외하곤 실제 실험 등에서 이용할 수 있는 프로그램을 많이 만들지 못한 것 같다. 이와 관련된 아이디어는 중화적정 실험에서 직접 그 그래프를 그려주는 프로그램과 같이 확장해서 만들어 볼 수 있을 것 같다.

